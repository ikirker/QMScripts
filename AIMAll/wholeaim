#!/usr/bin/env bash
# Runs a complete AIM job in the queue, including an initial single-core job to get the CPs and atomic input files, parallel integrations, then a final sumup.
##

AIMQB=$HOME/AIMAll/aimqb.ish
AIMINT=$HOME/AIMAll/aimint.ish
System="legion" # Options: xenon or legion

Help="
$0 - broken down tasks with AIMAll in the queue.
 Opts:
    -a <atoms>    Only do these atoms (comma separated list)
    -f '<flags>'  Flags to use for the aimqb runs. (Already included: -skipint=true -nogui)
    -i            Don't do the initial aimqb run to generate the integration files.
    -s            Don't do a final aimqb run to update the sum files.
    -h            Print this help message.
"

#Get command line arguments
while getopts  "ia:f:sh" flag
do
  case "$flag" in
    "a")
      AtomsGiven=$OPTARG
      ;;
    "f")
      OtherFlags=$OPTARG
      ;;
    "i")
      SkipInitialGenStep="y"
      ;;
    "s")
      SkipFinalSum="y"
      ;;
    "h")
      echo -e "$Help"
      exit
      ;;
    *)
      echo "Invalid argument provided."
      exit 5
      ;;
  esac
done

#Get the filename as the last argument
let filenameIndex=$OPTIND-1
shift $filenameIndex

Inputfile="$1"

case "$Inputfile" in
  *.fchk)
    # If we have an fchk file, generate a wfx file from it and 
    #  then proceed as if we had a wfx file.
    $AIMQB -f2wonly=true -nogui $Inputfile
    Wfxfile="${Inputfile%.fchk}.wfx"
  ;;
  *.wfx)
    Wfxfile="$Inputfile"
  ;;
  *.wfn)
    echo "Sorry, this does not yet support .wfn files."
    exit
  ;;
  *)
    echo "Please provide an input file (either a fchk or wfx), or use $0 -h for the options." >&2
    exit
  ;;
esac

Wfxfilestub=${Wfxfile%\.wfx}

# We need to:
#  1. Get the atomlist from the wfx file.
#  2. Format these to predict what the atomic files will be.
#  3. Make the submission scripts.
#  4. Submit them.

# Atom list tag in .wfx file.
: "
<Nuclear Names>
"
: "
</Nuclear Names>
"

# Sed doesn't allow inline comments O_o
: " #n #Turns off automatic printing.
s/<Nuclear Names>//           #Finds and removes the names tag so that
t AddToBuffer                 # this line <- will skip to the AddToBuffer loop
d                             #(if no names tag, clear the pattern space and cycle again)

:AddToBuffer                  #Label
N                             # Add the next line of input to the pattern buffer
s_\(.*\)</Nuclear Names>_\1_  # Find and remove the closing names tag
t Quit                        # Then if we found the closing tag above, skip to the print&quit
T AddToBuffer                 # Otherwise loop around again

:Quit                         #Label
y_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_ # Lower case all the atom labels
p                             # Print the pattern buffer
q                             # Quit
"

if [[ "$AtomsGiven" == "" ]]; then
Atoms=`cat $Wfxfile | sed "#n 
s/<Nuclear Names>//           
t AddToBuffer                 
d                             

:AddToBuffer                  
N                             
s_\(.*\)</Nuclear Names>_\1_  
t Quit                       
T AddToBuffer                

:Quit                        
y_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_
p                            
q                            
"`
else
  Atoms=$AtomsGiven
fi

#########

if [[ "$System" == "legion" ]]; then
JobHeader="#!/usr/bin/env bash
#$ -S /bin/bash
#$ -l h_rt=47:0:0
#$ -l mem=4G
#$ -P $PROJECT_ID
#$ -cwd
"
elif [[ "$System" == "xenon" ]]; then
JobHeader="#!/usr/bin/env bash
#$ -S /bin/bash
#$ -cwd
"
else
echo "Incorrect system name set, exiting." >&2
exit
fi
########e

NonIntLine="
ln -s $Wfxfilestub.ctl /tmp/$Wfxfilestub.ctl
"

DependencyLine="
#$ -hold_jid=\$Dependencies

"

GetJobID () {
  RETURN=${1##Your job }
  RETURN=${RETURN%% (*}
  RETURN=${RETURN// }
}

# For testing: outputs the jobs instead of submitting them. Breaks the job id things though.
#qsub() {
#  cat -n >&2
#}

if [[ "$SkipInitialGenStep" != "y" ]]; then
  JobCommand="$AIMQB -skipint=true -nogui $OtherFlags $Wfxfile"
  InitialJobID=$(echo -e "$JobHeader\n#\$ -N $Wfxfilestub-Header\n$NonIntLine\n$JobCommand\n" | qsub)
  GetJobID "$InitialJobID"
  InitialJobID=$RETURN
  echo "Initial job run, ID: $InitialJobID"
fi

CDLine="cd ${Wfxfilestub}_atomicfiles"
AtomIntIDs=""
for atom in $Atoms; do
  JobCommand="$AIMINT $atom.inp ../$Wfxfile"
  if [[ "$InitialJobID" != "" ]]; then
    DependencyLine="#\$ -hold_jid $InitialJobID"
  else
    DependencyLine=""
  fi
  ThisJobID=$(echo -e "$JobHeader\n#\$ -N $Wfxfilestub-Int$atom\n$DependencyLine\n$CDLine\n$JobCommand\n" | qsub)
  GetJobID "$ThisJobID"
  AtomIntIDs="$AtomIntIDs,$RETURN"
done

if [[ "$SkipFinalSum" != "y" ]]; then
  JobCommand="$AIMQB -skipint=true -nogui $OtherFlags $Wfxfile"
  Dependencies="$AtomIntIDs"
  if [[ "$AtomIntIDs" == "" ]]; then
    # If there aren't any job ids from the main bit, something is wrong
    echo "No job ids found from integration jobs, exiting..." >&2
  fi
  echo -e "$JobHeader\n#\$ -hold_jid $Dependencies\n#\$ -N $Wfxfilestub-Final\n$NonIntLine\n$JobCommand\n" | qsub
fi

#Done
