#!/usr/bin/env python
# Gets Mulliken orbital % contributions and energy information from both ADF and Gaussian .log files, and can also make SVG graphs of energy levels.
##


import re
import sys
import getopt
import collections
import math
from optparse import OptionParser


###################################
#  Named tuple recipe
#  This is in the collections
#   module in more up-to-date
#   versions of Python, but it's
#   included here for system-
#   proofing.
###################################
## {{{ http://code.activestate.com/recipes/500261/ (r15)
from operator import itemgetter as _itemgetter
from keyword import iskeyword as _iskeyword
import sys as _sys

def namedtuple(typename, field_names, verbose=False, rename=False):
    """Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    """

    # Parse and validate the field names.  Validation serves two purposes,
    # generating informative error messages and preventing template injection attacks.
    if isinstance(field_names, basestring):
        field_names = field_names.replace(',', ' ').split() # names separated by whitespace and/or commas
    field_names = tuple(map(str, field_names))
    if rename:
        names = list(field_names)
        seen = set()
        for i, name in enumerate(names):
            if (not min(c.isalnum() or c=='_' for c in name) or _iskeyword(name)
                or not name or name[0].isdigit() or name.startswith('_')
                or name in seen):
                    names[i] = '_%d' % i
            seen.add(name)
        field_names = tuple(names)
    for name in (typename,) + field_names:
        if not min(c.isalnum() or c=='_' for c in name):
            raise ValueError('Type names and field names can only contain alphanumeric characters and underscores: %r' % name)
        if _iskeyword(name):
            raise ValueError('Type names and field names cannot be a keyword: %r' % name)
        if name[0].isdigit():
            raise ValueError('Type names and field names cannot start with a number: %r' % name)
    seen_names = set()
    for name in field_names:
        if name.startswith('_') and not rename:
            raise ValueError('Field names cannot start with an underscore: %r' % name)
        if name in seen_names:
            raise ValueError('Encountered duplicate field name: %r' % name)
        seen_names.add(name)

    # Create and fill-in the class template
    numfields = len(field_names)
    argtxt = repr(field_names).replace("'", "")[1:-1]   # tuple repr without parens or quotes
    reprtxt = ', '.join('%s=%%r' % name for name in field_names)
    template = '''class %(typename)s(tuple):
        '%(typename)s(%(argtxt)s)' \n
        __slots__ = () \n
        _fields = %(field_names)r \n
        def __new__(_cls, %(argtxt)s):
            return _tuple.__new__(_cls, (%(argtxt)s)) \n
        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new %(typename)s object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != %(numfields)d:
                raise TypeError('Expected %(numfields)d arguments, got %%d' %% len(result))
            return result \n
        def __repr__(self):
            return '%(typename)s(%(reprtxt)s)' %% self \n
        def _asdict(self):
            'Return a new dict which maps field names to their values'
            return dict(zip(self._fields, self)) \n
        def _replace(_self, **kwds):
            'Return a new %(typename)s object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, %(field_names)r, _self))
            if kwds:
                raise ValueError('Got unexpected field names: %%r' %% kwds.keys())
            return result \n
        def __getnewargs__(self):
            return tuple(self) \n\n''' % locals()
    for i, name in enumerate(field_names):
        template += '        %s = _property(_itemgetter(%d))\n' % (name, i)
    if verbose:
        print template

    # Execute the template string in a temporary namespace
    namespace = dict(_itemgetter=_itemgetter, __name__='namedtuple_%s' % typename,
                     _property=property, _tuple=tuple)
    try:
        exec template in namespace
    except SyntaxError, e:
        raise SyntaxError(e.message + ':\n' + template)
    result = namespace[typename]

    # For pickling to work, the __module__ variable needs to be set to the frame
    # where the named tuple is created.  Bypass this step in enviroments where
    # sys._getframe is not defined (Jython for example) or sys._getframe is not
    # defined for arguments greater than 0 (IronPython).
    try:
        result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')
    except (AttributeError, ValueError):
        pass

    return result

# I removed the module unit test here - it checks for __main__



# Our (global) MO and SFO tuple specs
MOmaker  = namedtuple("MO", "energy occupancy spin number symmetry components")
SFOmaker = namedtuple("SFO", "percent number otype energy occupancy fragmentNumber fragmentName")

# Part of the ADF read-in process
def processEntry( match, matchType, currentSpin, MO=None ):
  g = match.groups() #Quick shorthand
  #print(matchType)
  #print(match.string)
  #print(g)  

  #If the line includes an MO spec, then we generate a new MO tuple for it
  if matchType=="full": #Then it's a full line, not a sub line
    MO = MOmaker( g[0], g[1], currentSpin, g[2], g[3], list() )
    #MO.energy    = g[0]
    #MO.occupancy = g[1]
    #MO.number    = g[2]
    #MO.symmetry  = g[3]

  #Then we append the SFO specced to the list of components for the MO in hand
  SFO = SFOmaker( g[-7], g[-6], g[-5], g[-4], g[-3], g[-2], g[-1] )
  MO.components.append(SFO)
  #SFO.percent = g[-7]
  #SFO.number  = g[-6]
  #SFO.otype    = g[-5]
  #SFO.energy  = g[-4]
  #SFO.occupancy = g[-3]
  #SFO.fragmentNumber = g[-2]
  #SFO.fragmentName   = g[-1]

  #Then return the MO so that future calls to add more SFOs can use it
  return MO

def componentString(MOcomponents, options):
  dictComponents, dictFragmentSums = generateFragmentDicts(MOcomponents, options)
  return generateComponentStringFromFragmentDicts(dictComponents, dictFragmentSums, options)

def generateFragmentDicts(MOcomponents, options):
  dictComponents = dict()
  dictFragmentSums = dict()
  # Note this is a little bad at the moment, since I completely fashioned it by the requirements of the moment
  #  - it doesn't distinguish between different fragments with the same name because I mostly cared about the Actinide
  for SFO in MOcomponents:
    if options.only_show != None:
      if SFO.fragmentName != options.only_show:
        continue
    elif options.dont_show != None:
      if (","+SFO.fragmentName+",") in (","+options.dont_show+","): # Added commas for specificity
        continue
    if (SFO.fragmentName + " " + SFO.otype) not in dictComponents:
      dictComponents[SFO.fragmentName + " " + SFO.otype] = float(SFO.percent)
    else:
      dictComponents[SFO.fragmentName + " " + SFO.otype] += float(SFO.percent)

    if SFO.fragmentName not in dictFragmentSums:
      dictFragmentSums[SFO.fragmentName] = float(SFO.percent)
    else:
      dictFragmentSums[SFO.fragmentName] += float(SFO.percent)
  
  return dictComponents, dictFragmentSums
  

def generateComponentStringFromFragmentDicts(dictComponents, dictFragmentSums, options):
  listFragmentSumStrings = list()
  for fragment in dictFragmentSums:
    listFragmentSumStrings.append("{%s %.0f%%}" % (fragment, dictFragmentSums[fragment]))
    #listFragmentSumStrings.append("{%s %.2f%%}" % (fragment, dictFragmentSums[fragment]))
  listFragmentSumStrings.sort()

  returnString = ""
  #for fragment in dictFragmentSums:
  for fragmentString in listFragmentSumStrings:
    returnString += fragmentString #("{%s %.2f%%}" % (fragment, dictFragmentSums[fragment]))
  returnString += " "  
  if options.skip_components==False:
    for component in dictComponents:
      #returnString += ("(%s, %.2f%%) " % (component, dictComponents[component]))  
      returnString += ("(%s, %.0f%%) " % (component, dictComponents[component]))  
  
  return returnString

def hsltorgb(h, s, l):
  if l<=0.5 :
    m2=l*(s+1)
  else:
    m2=l+s-l*s

  m1=l*2-m2
  r=huetorgb(m1, m2, h+1/3)
  g=huetorgb(m1, m2, h   )
  b=huetorgb(m1, m2, h-1/3)
  return ("#%06x" % (math.floor(r*256*256*255+g*256*255+b*255)%0xFFFFFF))

def huetorgb(m1, m2, h):
  if h<0 :
    h=h+1
  if h>1 :
    h=h-1 
  if h*6<1 :
    return m1+(m2-m1)*h*6
  if h*2<1 :
    m2
  if h*3<2 :
    return m1+(m2-m1)*(2/3-h)*6
  return m1

def getOccupancyPercentageColour(occupancy, percentage):
  # I'm not too sure about those colour settings. Pending tests.
  occupied = [ [0.7,  '#9999FF'],  #Pale but pure blue
               [0.5,  '#8640FF'],  #Lilac-blue
               [0.35, '#40A9FF'], #Pale blue
               [0.25, '#0BC9D6'],  #Cyan
               [0.1,  '#0BD6AA'],  #Mint-ish
               [0.05, '#3DED11'], #Rich green
               [0.0,  '#666666' ]] # Black
  unoccupied = [[ 0.5, '#C5E800' ], #A pretty vile slightly green-ish yellow
                [ 0.25,'#FFDD00' ], #A fair yellow
                [ 0.1, '#FF8000' ], #slightly Peachy red
                [ 0.0, '#FF0000' ]] #As red as red can be
  
  if occupancy >= 0.5:
    table = occupied
  else:
    table = unoccupied

  for entry in table:
    if percentage >= entry[0]:
      return entry[1]
      break
    else:
      continue



def getMOcolour( MO, options ):
  if options.colour_by == "occ" or options.colour_by == None:
    occ = float(MO.occupancy)
    if occ > 1.8:
      return "green"
    elif occ < 0.3:
      return "red"
    else:
      return ("#%06x" % (int(0x0000FF + occ*0x008800)))
  # Tricky to account for all cases
  #if options.colour_by == "sym":
  #  return { 'A': 'blue',
  # The above, plus red if the orbital isn't occupied
  #if options.colour_by == "symocc":
  if options.colour_by == "atom":
    True
  if options.colour_by == "actinide":
    dictComponents, dictFragmentSums = generateFragmentDicts(MO.components, options)
    metalPercentage = 0
    # This will only give one type's result if there is more than one type of metal atom.
    for key in dictFragmentSums:
      if key in "Th,Pa,U,Np,Pu,Am,Cm":
        metalPercentage = dictFragmentSums[key]
    return getOccupancyPercentageColour(float(MO.occupancy), metalPercentage/100)
  

def makeSVGscale( listOfMOlists, options, componentLabels=True):

  #Iterate over MOs, writing lines according to energy, and saving max and min
  #  Note - SVG origin is at top left
  maxEnergy = -50
  minEnergy = 50
  lines = list()

  series = 0
  for MOlist in listOfMOlists:
    series = series + 1
    lastEnergy = 0
    multiplicity = 0
    for MO in MOlist:
      thisEnergy = float(MO.energy)
      if maxEnergy < thisEnergy:
        maxEnergy = thisEnergy
      if minEnergy > thisEnergy:
        minEnergy = thisEnergy

      #if abs(lastEnergy - thisEnergy) < linesMultipleTolerance:
      #  multiplicity = multiplicity + 1
      #else:
      #  multiplicity = 0
      #lastEnergy = thisEnergy  
      
      #colour = colourList[multiplicity]
      colour = getMOcolour(MO, options) 
      # We can't place the lines on the y axis until we know the overall energy minimum and maximum, so add them to a list for later
      if componentLabels == True:
        label = MO.energy + "  " + componentString(MO.components)
        lines.append([series, MO.energy, colour, label])
      else:
        lines.append([series, MO.energy, colour])

  # Construct internal margins - distances to the graphbox
  #  Measurements are kind of in pixels (scalable pixels, I guess?)

  leftMargin = 150 # We draw the y axis in the left margin, so it should be big
  bottomMargin = 100 # And labels in the bottom margin
  rightMargin = 50
  topMargin = 50

  lineLength = 50
  lineWidth = 1.0
  lineGapBetweenSeries=150
  
  pageWidth = leftMargin + rightMargin + series * lineLength + lineGapBetweenSeries * (series+1)
  pageHeight = 800 # This is our main scaling reference point.

  graphBoxWidth = pageWidth - (leftMargin + rightMargin)
  graphBoxHeight = pageHeight - (topMargin + bottomMargin)

  scaleMax = 0.5 * math.ceil(maxEnergy*2)
  scaleMin = 0.5 * math.floor(minEnergy*2)
  
  # This function converts the MO energies into y coordinates
  scaleFactor = (graphBoxHeight / (scaleMax - scaleMin))
  eScale = lambda y: int (topMargin + (-1 * (float(y) - scaleMax) * scaleFactor ))

  # I think now we can actually make some SVG. \o/

  #lineMultipleTolerance = 0.003 # In whatever units the MO.energy is in
  
  SVGText = "" #Build up the text in this variable. 
  
  #Make scale
  scalePips   = 0.5 # In energy units
  scalePipLength = 3 
  scaleMultiplier = 1
  scaleColour='black'
  scaleStroke = 2 
  scaleTextSize = 18
  scaleFont = "Bitstream Vera"
  axisText = "Energy (eV)"

  # The axis
  SVGText = ( "<line x1='%d' x2='%d' y1='%d' y2='%d' stroke='%s' stroke-width='%d' />\n" %
    (leftMargin, leftMargin, eScale(scaleMin), eScale(scaleMax), scaleColour, scaleStroke) )

  # Count down from scaleMax to scaleMin, putting pips on the axis.
  pip = scaleMax
  while pip >= scaleMin:
    SVGText += ("<line x1='%d' x2='%d' y1='%d' y2='%d' stroke='%s' stroke-width='%d' />\n" %
        (leftMargin - scalePipLength, leftMargin, eScale(pip), eScale(pip), scaleColour, scaleStroke) )
    # This version makes the text half as wide. It looks a bit weird.
    #SVGText += ( "<text x='%d' y='%d' fill='%s' font-family='%s' font-size='%d' transform='scale(0.5,1)'> %-.1f </text>\n" %
    SVGText += ( "<text x='%d' y='%d' fill='%s' font-family='%s' font-size='%d' text-anchor='end'> %-.1f </text>\n" %
        (leftMargin - scalePipLength * 2 , eScale(pip) + scaleTextSize/3, scaleColour, scaleFont, scaleTextSize, pip)  )
    pip -= scalePips

  # Label the axis
  SVGText+= ("<text x='%d' y='%d' fill='%s' font-family='%s' font-size='%d' text-anchor='middle' transform='rotate(-90 %d %d)'> %s </text>\n" %
      (leftMargin/2, pageHeight/2, scaleColour, scaleFont, scaleTextSize, leftMargin/2, pageHeight/2, axisText) )

  # Now draw lines (this doesn't do labels yet)
  for line in lines:
    SVGText += ("<line x1='%d' x2='%d' y1='%d' y2='%d' stroke='%s' stroke-width='%f' /><!--%s-->\n" %
                 ( (leftMargin + line[0] * lineGapBetweenSeries + (line[0] - 1) * lineLength),
                   (leftMargin + line[0] * lineGapBetweenSeries + line[0] * lineLength),
                   eScale(line[1]), eScale(line[1]), line[2], lineWidth, line[1]
                 )
               )

  # Labels
  if options.graph_labels:
    labelCount = 0
    for label in options.graph_labels.split(","):
      labelCount+=1
      SVGText+=("<text x='%d' y='%d' fill='%s' font-family='%s' font-size='%d' text-anchor='middle'> %s </text>\n" %
                 ( leftMargin + labelCount * lineGapBetweenSeries + (labelCount - 0.5) * lineLength,
                   pageHeight - (bottomMargin/2), scaleColour, scaleFont, scaleTextSize, label
                 )
               )

  # Title
  if options.graph_title:
    SVGText+=("<text x='%d' y='%d' fill='%s' font-family='%s' font-size='%d' text-anchor='middle'> %s </text>\n" %
               ( pageWidth/2, 0.8 * topMargin, scaleColour, scaleFont, scaleTextSize+1, options.graph_title )
              )

  #Now we have all the bits, open and write the SVG file
  SVGfile = open(options.svgFilename, "w")
  SVGfile.write("""<?xml version="1.0" standalone="no"?>\n"""+
                """<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n""")

  # Fit the viewbox to the max and min
  SVGfile.write("""<svg version="1.1" baseProfile="full" \n\t xmlns="http://www.w3.org/2000/svg" \n""" + 
                """\t xmlns:xlink="http://www.w3.org/1999/xlink" \n\t xmlns:ev="http://www.w3.org/2001/xml-events" \n""" +
                """\t zoomAndPan="magnify" \n""" + 
                """\t width="%d" height="%d" >\n""" % (pageWidth, pageHeight) )
                #"""\t viewBox = "%d %d %d %d" > \n""" % ( 0, 0, pageWidth, pageHeight ) )
  
  SVGfile.write(SVGText)
                
  # Put a line at the origin if it's in the graph
  if maxEnergy > 0 and minEnergy < 0:
    SVGfile.write('<line x1="5" x2="550" y1="' + str(eScale(0)) + '" y2="' + str(eScale(0)) + '" stroke="red" stroke-width="1" style="stroke-dasharray: 5, 3;" />'+"\n")

  # And we're done. Finish up and close the file.
  SVGfile.write("</svg>")
  SVGfile.close()
  return

def printTSVenergies(MOlist):
  for MO in MOlist:
    sys.stdout.write("%s\t" % MO.energy)
  return

def parseOptions():
  usage = "usage: %prog [options] arg1 ..."
  parser = OptionParser(usage=usage)
  parser.add_option("-s", "--svg", action="store", type="string", dest="svgFilename", default=None, 
                    help="write SVG diagram to FILE", metavar="file")
  parser.add_option("--colourby", action="store", type="string", dest="colour_by", default=None, 
          help="colour orbital points on plot by PARAM", metavar="param")
  parser.add_option("--graphlabels", action="store", type="string", dest="graph_labels", default=None,
          help="labels for each series on an SVG plot", metavar="labels")
  parser.add_option("--graphtitle", action="store", type="string", dest="graph_title", default=None,
          help="title of SVG plot", metavar="title")
  parser.add_option("-a", "--alpha", action="store_true", dest="alpha", default=False,
          help="only consider alpha spin orbitals")
  parser.add_option("-b", "--beta",  action="store_true", dest="beta", default=False,
          help="only consider beta spin orbitals")
  parser.add_option("--nobeta", action="store_true", dest="nobeta", default=False,
          help="remove beta spin orbitals (to get alpha and restricted)")
  parser.add_option("--noalpha", action="store_true", dest="noalpha", default=False,
          help="remove alpha spin orbitals (to get beta and restricted)")
  parser.add_option("-o", "--occ",   action="store_true", dest="occ", default=False,
          help="only consider occupied orbitals")
  parser.add_option("-t", "--tsv",   action="store_true", dest="tsv", default=False,
          help="only print energies as tsv")
  parser.add_option("--cols",   action="store_true", dest="cols", default=False,
          help="output in columns")
  parser.add_option("-m", "--nocomps", action="store_true", dest="skip_components", default=False,
          help="don't print detailed components")
  parser.add_option("-l", action="store", type="float", dest="min_energy", default=None, help="Lower energy bound")
  parser.add_option("-u", action="store", type="float", dest="max_energy", default=None, help="Upper energy bound")
  parser.add_option("--minocc", action="store", type="float", dest="minocc", default=None, help="Minimum occupation")
  parser.add_option("--maxocc", action="store", type="float", dest="maxocc", default=None, help="Maximum occupation")
  parser.add_option("-d", "--remove_degeneracy", action="store_true", dest="remove_degeneracy", default=False,
          help="remove degenerate orbitals")
  parser.add_option("--only-show", action="store", type="string", dest="only_show", default=None,
          help="Only show percentage components of a certain atom", metavar="atom")
  parser.add_option("--dont-show", metavar="atom1,atom2,...", action="store", type="string", dest="dont_show", default=None,
          help="Don't show percentage components of certain atoms")
  parser.add_option("--pgf", action="store_true", dest="pgf_modus", default=False,
          help="generate output energies for PGFPlots")
  #I'd like to add this but first TODO I'd have to convert the energies to actually be numbers below
  #  and it'd involve a fair bit of fiddling
  #parser.add_option("-u", "--units", action="store", type="string", dest="units", default="eV",
  #        help="select units for text output (default=eV, options=Hartree, eV, cm^-1, kJ/mol")
  (options, args) = parser.parse_args()
  
  if len(args) == 0:
    parser.print_help()
    sys.exit(2)
  
  return (options,args)

def readADForbitalContributions(lines):
  reSection = re.compile("[ \t]+List of all MOs, ordered by energy, with the most significant SFO gross populations")
  reSpin    = re.compile("[ \t]+\*\*\* SPIN (\d) \*\*\*")
  reSubsection = re.compile("[ \t]+-------------------------------------------------------------------------------------")

  markSection = False
  markSubsection = False  
  spin = 0
  
  # Sample output from ADF 
  #          E(eV)  Occ       MO           %     SFO (first member)   E(eV)  Occ   Fragment
  # e.g.
  #     -22.427  1.00    37 AA        35.01%     5 P:y           -22.819  2.00     1 Am
  #                                   14.31%     5 P:x           -22.819  2.00     1 Am
                     
  reTopEntry = re.compile("""[ \t]+
                ([-]{0,1}\d+\.\d+)[ \t]+
                (\d\.\d+)[ \t]+
                (\d+)[ ]+(\w+|\w+:\d+)[ \t]+
                (\d+\.\d+)%[ \t]+
                (\d+)[ \t]+
                (\w:\S+|\w)[ \t]+
                ([-]{0,1}\d+\.\d+)[ \t]+
                (\d\.\d+)[ \t]+
                (\d+)[ \t]+
                (\w+)""", re.X)
  reSubEntry = re.compile("""[ \t]+
                ([-]{0,1}\d+\.\d+)%[ \t]+
                (\d+)[ \t]+
                (\w:\S+|\w)[ \t]+
                ([-]{0,1}\d+\.\d+)[ \t]+
                (\d\.\d+)[ \t]+
                (\d+)[ \t]+
                (\w+)""", re.X)

  reNextSection = re.compile("[ \t]+===============================================================================")
  
  #Done defining Regexps, now read in orbitals
  MOlist = list()

  for line in lines:
    
    if markSection == False:
      if reSection.match(line)!=None:
        markSection = True
        continue
    else:
      if markSubsection == False:
        if reSubsection.match(line)!=None:
          markSubsection = True
          continue
      else:
        maLine = reTopEntry.match(line)
        if maLine != None:
          #Pull out entry bits
          mostRecentMO = processEntry( maLine, "full", spin )
          MOlist.append(mostRecentMO)
          continue
        else:
          maLine = reSubEntry.match(line)
          if maLine != None:
            #Pull out subentry bits
            processEntry( maLine, "sub", spin, mostRecentMO )
            continue
        if reNextSection.match(line) != None:
          break
      maLine = reSpin.match(line)
      if maLine != None:
        spin = maLine.group(1)
  #Done for
  return MOlist

def readG09orbitalContributions(lines):
  #The G09 output is a bit simpler and contains less information, unfortunately,
  # so we have to omit some fields
  reStartSection = re.compile(" Atomic contributions to (Alpha|Beta ) molecular orbitals:")
  reEntry        = re.compile("(Alpha|Beta ) (occ|vir) (\d+) OE=([-]?\d+\.\d+) is (.*?)(?=(Alpha|Beta|$))")
  reBlankLine    = re.compile("[\t ]*$")

  inSection = False
  MOlist = list()

  orbLines = ""

  for line in lines:
    #Because Gaussian only has something like a 200 character buffer for the
    #  output for this section, we need to glue the lines together and then
    #  split them apart again.
    
    if inSection == False:
      maStartSection = reStartSection.match(line)
      if maStartSection == None:
        continue
      else:
        inSection = True
    else:
      if reBlankLine.match(line) != None:
        inSection = False
        continue
      orbLines = orbLines + line.lstrip(' ').rstrip("\n")  
    
  for maOrb in reEntry.finditer(orbLines):  
    if maOrb.group(1) == "Alpha":
      spinLabel = "1"
    elif maOrb.group(1) == "Beta ":
      spinLabel = "2"
    else:
      spinLabel = "0" # TODO At some stage I really should test this with a closed-shell system
    
    if maOrb.group(2) == "occ":
      occLabel = "1.00"
    else:
      occLabel = "0.00" # TODO And also I haven't seen how Gaussian prints partially occupied orbitals here
      
    # Gaussian prints the energies in Hartrees, ADF in eV - other functions expect eV
    currentMO = MOmaker(str(27.2116*float(maOrb.group(4))), occLabel, spinLabel, maOrb.group(3), "?", list() )  
    
    componentText = maOrb.group(5)
    for m in re.finditer("([A-Za-z]+)(\d+)-(\w)=([-]?\d\.\d\d)", componentText):
      #print("%s| |%s| |%s| |%s" % (m.group(1), m.group(2), m.group(3), m.group(4)))
      currentMO.components.append(
          SFOmaker(str(100*float(m.group(4))),
              "_", 
              m.group(3), "_", 
              "_", m.group(2), 
              m.group(1)))
    MOlist.append(currentMO)      
    #SFOmaker = collections.namedtuple("SFO", "percent number otype energy occupancy fragmentNumber fragmentName")
  
  return MOlist

def filterByList(thing, filters):
  for f in filters:
    if f(thing) == False:
      return False
  return True

def filterMOlist(MOlist, options):
  #MOmaker  = collections.namedtuple("MO", "energy occupancy spin number symmetry components")
  filterList = list()
  
  if options.alpha:
    filterList.append( lambda MO: MO.spin=="1" )
  if options.beta:
    filterList.append( lambda MO: MO.spin=="2" )
  if options.noalpha:
    filterList.append( lambda MO: MO.spin!="1" )
  if options.nobeta:
    filterList.append( lambda MO: MO.spin!="2" )
  if options.occ:
    filterList.append( lambda MO: float(MO.occupancy) >= 0.5 )
  if options.minocc != None:
    filterList.append( lambda MO: float(MO.occupancy) >= options.minocc )
  if options.maxocc != None:
    filterList.append( lambda MO: float(MO.occupancy) <= options.maxocc )
  if options.min_energy != None:
    filterList.append( lambda MO: float(MO.energy) >= options.min_energy )
  if options.max_energy != None:
    filterList.append( lambda MO: float(MO.energy) <= options.max_energy )
 
  filterByListLambda = lambda x: filterByList(x,filterList)
  MOlist = filter(filterByListLambda, MOlist)

  #if options.remove_degeneracy: # This is a two-orbital operation, so it can't be in the list above
  return MOlist


def getFileType(filename):
  extensions = {'out': 'adf', 'log': 'g09'}
  reFilename = re.compile("(.*)\.(%s)$" % ('|'.join(extensions.keys())))
  maFilename = reFilename.match(filename)
  if maFilename==None:
    sys.stderr.write("File '%s' has inappropriate extension.")
    sys.exit(2)
  return extensions[maFilename.group(2)]

def main():

  (options, args) = parseOptions()

  listOfMOlists = list()

  for inputFilename in args:
    sys.stderr.write("File: %s\n" %(inputFilename))  
    inputFileType = getFileType(inputFilename)
    inputFile = open(inputFilename, "r")
    lines = inputFile.readlines()

    if inputFileType == 'adf':
      MOlist = readADForbitalContributions(lines)
    if inputFileType == 'g09':
      MOlist = readG09orbitalContributions(lines)
    
    sys.stderr.write("  Read in "+str(len(MOlist))+" MOs.\n")
    MOlist = filterMOlist(MOlist, options)
    
    if options.remove_degeneracy:
      MOlist2 = list()
      lastEnergy=0
      for MO in MOlist:
        if MO.energy != lastEnergy: # Remember this is actually a string comparison
          MOlist2.append(MO)
        lastEnergy = MO.energy
      MOlist = MOlist2    
    
    sys.stderr.write("  Filtered to " + str(len(MOlist)) + " MOs.\n")

    #Sort the list of MOs by energy
    MOlist.sort(key=lambda MO: float(MO.energy))

    listOfMOlists.append(MOlist)

    inputFile.close() 

  outputSets = list()
  for MOlist in listOfMOlists:
    outputSet = list()
    for MO in MOlist:
      if (int(MO.spin) == 1):
        spinLabel = "+"
      elif (int(MO.spin) == 2):
        spinLabel = "-"
      else:
        spinLabel = "+-"
      oneLine = ("%3s %5s%1s: %7s eV, %s occ: " % (MO.number, MO.symmetry, spinLabel, MO.energy, MO.occupancy))
      if options.pgf_modus == True:
        oneLine = ("(%s,%7s) %% %s " % (options.only_show,MO.energy, MO.occupancy))
      oneLine += ("%s " % (componentString(MO.components,options))) 
      outputSet.append(oneLine)
    outputSets.append(outputSet)
    if options.tsv:
      sys.stdout.write("--TSV--\n")
      printTSVenergies(MOlist)

  # Produce columnar output if required, else series of rows
  if options.cols:
    # All this is basically just space-filling and a transposition of an array
    numCols = len(outputSets)
    numRows = 0
    for outputSet in outputSets:
      if len(outputSet) > numRows:
        numRows = len(outputSet)
    sys.stderr.write("Preparing %d cols x %d rows.\n" % (numCols,numRows))
    outputSegments = [['' for dummy in range(numCols)] for otherDummy in range(numRows)] 
    for i in range(numRows):
      for j in range(numCols):
        if len(outputSets[j])<=i:
          outputSegments[i][j] = " "
        else:
          outputSegments[i][j] = outputSets[j][i]
    for outputLine in outputSegments:
      sys.stdout.write("%s\n" % (' \t'.join(outputLine)))
  else:
    for outputSet in outputSets:
      for outputLine in outputSet:
        sys.stdout.write("%s \n" % (outputLine))

  
  if options.svgFilename:  
    makeSVGscale(listOfMOlists, options, False)

if __name__ == "__main__":
  main()  

